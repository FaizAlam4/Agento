version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: ./agentic_backend
      dockerfile: Dockerfile
    container_name: agentic_backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./agentic_backend:/app
      - /app/node_modules
    networks:
      - agentic_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: ./agentic_frontend
      dockerfile: Dockerfile
    container_name: agentic_frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://localhost:3001
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - agentic_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Service (PostgreSQL) - Optional
  # Uncomment and configure when you need a database
  # database:
  #   image: postgres:15-alpine
  #   container_name: agentic_database
  #   environment:
  #     - POSTGRES_DB=agentic_db
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - agentic_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Redis Service (for caching/sessions) - Optional
  # Uncomment when you need Redis
  # redis:
  #   image: redis:7-alpine
  #   container_name: agentic_redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - agentic_network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

networks:
  agentic_network:
    driver: bridge
    name: agentic_network

# Volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
